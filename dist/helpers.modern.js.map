{"version":3,"file":"helpers.modern.js","sources":["../src/helpers.js"],"sourcesContent":["const multisort = require('./modules/multisort.js');\nconst multifilter = require('./modules/multifilter.js');\nconst multikey = require('./modules/multikey.js');\nconst intersect = require('./modules/intersect.js');\nconst min = require('./modules/min.js');\nconst max = require('./modules/max.js');\nconst diff = require('./modules/diff.js');\nconst unique = require('./modules/unique.js');\nconst summ = require('./modules/summ.js');\nconst average = require('./modules/average.js');\nconst random = require('./modules/random.js');\nconst getByKey = require('./modules/getByKey.js');\nconst first = require('./modules/first.js');\nconst last = require('./modules/last.js');\n\n/**\n * Object helper\n */\nclass Arr extends Array {\n    static get [Symbol.species]() {\n        return Array;\n    }\n\n    /**\n     * Sort a multiarray.\n     *\n     * @param {string} key\n     * @param {string} direction\n     *\n     * @return {array}\n     */\n    multisort(key, direction) {\n        return multisort(this[0], key, direction);\n    }\n\n    /**\n     * Filter a multi array.\n     *\n     * @param {string}  key\n     * @param {string}  find\n     * @param {boolean} operator\n     *\n     * @return {array}\n     */\n    multifilter(key, find, operator) {\n        return multifilter(this[0], key, find, operator);\n    }\n\n    /**\n     * Only get some keys of a multi array.\n     *\n     * @param {string} key\n     *\n     * @return {array}\n     */\n    multikey(key) {\n        return multikey(this[0], key);\n    }\n\n    /**\n     * Get the intersection of arrays.\n     *\n     * @param {string}  array\n     * @param {boolean} multi\n     *\n     * @return {array}\n     */\n    intersect(array, multi) {\n        return intersect(this[0], array, multi);\n    }\n\n    /**\n     * Get the difference of arrays.\n     *\n     * @param {string}  array\n     * @param {boolean} total\n     *\n     * @return {array}\n     */\n    diff(array, total) {\n        return diff(this[0], array, total);\n    }\n\n    /**\n     * Get the unique values of an array.\n     *\n     * @return {array}\n     */\n    get unique() {\n        return unique(this[0]);\n    }\n\n    /**\n     * Only add the value if the value isnt in the array.\n     *\n     * @param {string} newValue\n     *\n     * @return {int}\n     */\n    pushIfNotExists(newValue) {\n        if (this.indexOf(newValue) < 0) {\n            this.push(newValue);\n        }\n\n        return this.length;\n    }\n\n    /**\n     * Add multiple values to an array.\n     *\n     * @param {array} newValues\n     *\n     * @return {int}\n     */\n    pushMultiple(newValues) {\n        this.push(...newValues);\n\n        return this.length;\n    }\n\n    /**\n     * Add multiple values to an array.\n     * Only add the value if the value isnt in the array.\n     *\n     * @param {array} newValues\n     *\n     * @return {int}\n     */\n    pushMultipleIfNotExists(newValues) {\n        const array = this;\n\n        newValues.forEach((value) => {\n            array.pushIfNotExists(value);\n        });\n\n        return array.length;\n    }\n\n    /**\n     * The largest of the given numbers.\n     * If at least one of the arguments cannot be converted to a number,\n     * NaN is returned.\n     *\n     * @return {int}\n     */\n    get max() {\n        return max(this[0]);\n    }\n\n    /**\n     * The smallest of the given numbers.\n     * If at least one of the arguments cannot be converted to a number,\n     * NaN is returned.\n     *\n     * @return {int}\n     */\n    get min() {\n        return min(this[0]);\n    }\n\n    /**\n     * Get a random value of an array.\n     *\n     * @return {string}\n     */\n    get random() {\n        return random(this);\n    }\n\n    /**\n     * The summ of all values.\n     *\n     * @return {int}\n     */\n    get summ() {\n        return summ(this[0]);\n    }\n\n    /**\n     * Get the average of all values.\n     *\n     * @return {int}\n     */\n    get average() {\n        return average(this[0]);\n    }\n\n    /**\n     * Javascript implementation of Arr::get\n     *\n     * @param {string} key\n     * @param {object|null} defaultValue\n     *\n     * @return {object|null}\n     */\n    getByKey(key, defaultValue) {\n        return getByKey(this[0], key, defaultValue);\n    }\n\n    /**\n     * Javascript implementation of Arr::first\n     *\n     * @return {object|null}\n     */\n    get first() {\n        return first(this[0]);\n    }\n\n    /**\n     * Javascript implementation of Arr::last\n     *\n     * @return {object|null}\n     */\n    get last() {\n        return last(this[0]);\n    }\n}\n\nmodule.exports = {\n    Arr,\n    multisort,\n    multifilter,\n    multikey,\n    intersect,\n    min,\n    max,\n    diff,\n    unique,\n    summ,\n    average,\n    random,\n    getByKey,\n    first,\n    last,\n};\n"],"names":["multisort","require","multifilter","multikey","intersect","min","max","diff","unique","summ","average","random","getByKey","first","last","Arr","Array","static","Symbol","species","key","direction","this","find","operator","array","multi","total","pushIfNotExists","newValue","indexOf","push","length","pushMultiple","newValues","pushMultipleIfNotExists","forEach","value","defaultValue","module","exports"],"mappings":"AAAA,MAAMA,EAAYC,QAAQ,0BACpBC,EAAcD,QAAQ,4BACtBE,EAAWF,QAAQ,yBACnBG,EAAYH,QAAQ,0BACpBI,EAAMJ,QAAQ,oBACdK,EAAML,QAAQ,oBACdM,EAAON,QAAQ,qBACfO,EAASP,QAAQ,uBACjBQ,EAAOR,QAAQ,qBACfS,EAAUT,QAAQ,wBAClBU,EAASV,QAAQ,uBACjBW,EAAWX,QAAQ,yBACnBY,EAAQZ,QAAQ,sBAChBa,EAAOb,QAAQ,qBAKrB,MAAMc,UAAYC,MACdC,WAAYC,OAAOC,WACf,OAAOH,MAWXhB,UAAUoB,EAAKC,GACX,OAAOrB,EAAUsB,KAAK,GAAIF,EAAKC,GAYnCnB,YAAYkB,EAAKG,EAAMC,GACnB,OAAOtB,EAAYoB,KAAK,GAAIF,EAAKG,EAAMC,GAU3CrB,SAASiB,GACL,OAAOjB,EAASmB,KAAK,GAAIF,GAW7BhB,UAAUqB,EAAOC,GACb,OAAOtB,EAAUkB,KAAK,GAAIG,EAAOC,GAWrCnB,KAAKkB,EAAOE,GACR,OAAOpB,EAAKe,KAAK,GAAIG,EAAOE,GAQhCnB,aACI,OAAOA,EAAOc,KAAK,IAUvBM,gBAAgBC,GAKZ,OAJIP,KAAKQ,QAAQD,GAAY,GACzBP,KAAKS,KAAKF,QAGFG,OAUhBC,aAAaC,GAGT,OAFAZ,KAAKS,QAAQG,QAEDF,OAWhBG,wBAAwBD,GACpB,MAAMT,EAAQH,KAMd,OAJAY,EAAUE,QAASC,IACfZ,EAAMG,gBAAgBS,KAGnBZ,EAAMO,OAUjB1B,UACI,OAAOA,EAAIgB,KAAK,IAUpBjB,UACI,OAAOA,EAAIiB,KAAK,IAQpBX,aACI,OAAOA,EAAOW,MAQlBb,WACI,OAAOA,EAAKa,KAAK,IAQrBZ,cACI,OAAOA,EAAQY,KAAK,IAWxBV,SAASQ,EAAKkB,GACV,OAAO1B,EAASU,KAAK,GAAIF,EAAKkB,GAQlCzB,YACI,OAAOA,EAAMS,KAAK,IAQtBR,WACI,OAAOA,EAAKQ,KAAK,KAIzBiB,OAAOC,QAAU,CACbzB,IAAAA,EACAf,UAAAA,EACAE,YAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAC,IAAAA,EACAC,IAAAA,EACAC,KAAAA,EACAC,OAAAA,EACAC,KAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,SAAAA,EACAC,MAAAA,EACAC,KAAAA"}