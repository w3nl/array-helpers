{"version":3,"file":"helpers.modern.js","sources":["../src/modules/multisort.js","../src/modules/min.js","../src/modules/max.js","../src/modules/multifilter.js","../src/modules/multikey.js","../src/modules/intersect.js","../src/modules/diff.js","../src/modules/unique.js","../src/modules/summ.js","../src/modules/average.js","../src/modules/random.js","../src/modules/getByKey.js","../src/modules/first.js","../src/modules/last.js","../src/modules/update.js","../src/helpers.js"],"sourcesContent":["class Sorter {\n    constructor(key, direction) {\n        this.key = key;\n        this.moveDirection = direction === 'desc' ? -1 : 1;\n    }\n\n    order(original) {\n        return original.sort(this.compare.bind(this));\n    }\n\n    compare(firstElement, secondElement) {\n        let nameA = firstElement[this.key];\n        let nameB = secondElement[this.key];\n\n        if (typeof nameA === 'string') {\n            nameA = nameA.toUpperCase();\n        }\n\n        if (typeof nameB === 'string') {\n            nameB = nameB.toUpperCase();\n        }\n\n        if (nameA < nameB) {\n            return -1 * this.moveDirection;\n        }\n\n        if (nameA > nameB) {\n            return 1 * this.moveDirection;\n        }\n\n        return 0;\n    }\n\n    static create(original, key, direction) {\n        const sorter = new Sorter(key, direction);\n\n        return sorter.order(original);\n    }\n}\n\nexport default function multisort(original, key, direction) {\n    return Sorter.create(original, key, direction);\n}\n","export default function min(original) {\n    if (typeof original !== 'object' || original.length < 1) {\n        return null;\n    }\n\n    return original.reduce((a, b) => Math.min(a, b));\n}\n","export default function max(original) {\n    if (typeof original !== 'object' || original.length < 1) {\n        return null;\n    }\n\n    return original.reduce((a, b) => Math.max(a, b));\n}\n","import min from './min';\nimport max from './max';\n\nclass Match {\n    constructor(find, operator) {\n        this.find = find;\n        this.operator = operator || null;\n    }\n\n    check(value) {\n        if (Array.isArray(this.find)) {\n            return this.checkOperators(value, this.find.indexOf(value) < 0);\n        }\n\n        return this.checkOperators(value, String(value) !== String(this.find));\n    }\n\n    checkOperators(value, find) {\n        const maxValue = max(this.find);\n        const minValue = min(this.find);\n        const hasMax = maxValue !== null;\n        const hasMin = minValue !== null;\n\n        const notOperator =\n            find && (this.operator === '!=' || this.operator === '<>');\n        const noInput = !find && !this.operator;\n        const gtOperator =\n            ((value > maxValue && hasMax) || value > this.find) &&\n            this.operator === '>';\n        const gteOperator =\n            ((value >= maxValue && hasMax) || value >= this.find) &&\n            this.operator === '>=';\n        const ltOperator =\n            ((value < minValue && hasMin) || value < this.find) &&\n            this.operator === '<';\n        const lteOperator =\n            ((value <= minValue && hasMin) || value <= this.find) &&\n            this.operator === '<=';\n\n        return (\n            notOperator ||\n            noInput ||\n            gtOperator ||\n            gteOperator ||\n            ltOperator ||\n            lteOperator\n        );\n    }\n\n    static create(original, key, find, operator) {\n        const matcher = new Match(find, operator);\n\n        return original.filter((item) => {\n            let values = item[key];\n\n            if (!values) {\n                return false;\n            }\n\n            values = values.toString().split(',');\n\n            return values.some(matcher.check.bind(matcher));\n        });\n    }\n}\n\nexport default function multifilter(original, key, find, operator) {\n    return Match.create(original, key, find, operator);\n}\n","export default function multikey(original, key) {\n    return original.map((value) => {\n        const item = {};\n\n        if (typeof key === 'object') {\n            key.forEach((itemKey) => {\n                item[itemKey] = value[itemKey];\n            });\n\n            return item;\n        }\n\n        return value[key];\n    });\n}\n","export default function intersect(original, array, multi) {\n    return original.filter((value) => {\n        if (multi) {\n            const found = array.reduce((accumulator, currentValue) => {\n                if (currentValue.indexOf(value) >= 0) {\n                    return accumulator + 1;\n                }\n\n                return accumulator;\n            }, 0);\n\n            return found === array.length;\n        }\n\n        return array.indexOf(value) >= 0;\n    });\n}\n","class Diff {\n    constructor(currentArray, otherArray, total) {\n        this.currentArray = currentArray;\n        this.otherArray = otherArray;\n        this.total = total;\n    }\n\n    get differenceArray() {\n        return this.currentArray.filter(\n            (value) => this.otherArray.indexOf(value) < 0\n        );\n    }\n\n    get differenceArrayB() {\n        if (!this.total) {\n            return [];\n        }\n\n        return this.otherArray.filter(\n            (value) => this.currentArray.indexOf(value) < 0\n        );\n    }\n\n    get compare() {\n        return this.differenceArray.concat(this.differenceArrayB);\n    }\n\n    static create(currentArray, otherArray, total) {\n        const differ = new Diff(currentArray, otherArray, total);\n\n        return differ.compare;\n    }\n}\n\nexport default function diff(currentArray, otherArray, total) {\n    return Diff.create(currentArray, otherArray, total);\n}\n","export default function unique(originalArray) {\n    return originalArray.filter(\n        (value, index, self) => self.indexOf(value) === index\n    );\n}\n","export default function summ(originalArray) {\n    if (!Array.isArray(originalArray) || originalArray.length < 1) {\n        return null;\n    }\n\n    return originalArray.reduce((a, b) => a + b, 0);\n}\n","import summ from './summ';\n\nexport default function average(originalArray) {\n    if (!Array.isArray(originalArray) || originalArray.length < 1) {\n        return null;\n    }\n\n    return summ(originalArray) / originalArray.length;\n}\n","export default function random(originalArray) {\n    const minimum = 0;\n    const maximum = originalArray.length;\n    const randomIndex =\n        Math.floor(Math.random() * (maximum - minimum)) + minimum;\n\n    return originalArray[randomIndex];\n}\n","export default function getByKey(original, key, defaultValue) {\n    const keys = key.split('.');\n\n    let reference = original;\n\n    while (keys.length > 0) {\n        const referenceKey = keys.shift();\n\n        if (\n            reference === null ||\n            reference === undefined ||\n            !Object.prototype.hasOwnProperty.call(reference, referenceKey)\n        ) {\n            return defaultValue;\n        }\n        reference = reference[referenceKey];\n    }\n\n    return reference;\n}\n","export default function first(originalArray) {\n    if (!Array.isArray(originalArray) || originalArray.length < 1) {\n        return null;\n    }\n\n    return originalArray[0];\n}\n","export default function last(originalArray) {\n    if (!Array.isArray(originalArray) || originalArray.length < 1) {\n        return null;\n    }\n\n    return originalArray[originalArray.length - 1];\n}\n","export default function update(originalArray, newValues, keys) {\n    return originalArray.map((item) => {\n        const found = newValues.find((newItem) =>\n            keys.every((key) => newItem[key] === item[key])\n        );\n\n        return found ? { ...item, ...found } : item;\n    });\n}\n","import multisort from './modules/multisort';\nimport multifilter from './modules/multifilter';\nimport multikey from './modules/multikey';\nimport intersect from './modules/intersect';\nimport min from './modules/min';\nimport max from './modules/max';\nimport diff from './modules/diff';\nimport unique from './modules/unique';\nimport summ from './modules/summ';\nimport average from './modules/average';\nimport random from './modules/random';\nimport getByKey from './modules/getByKey';\nimport first from './modules/first';\nimport last from './modules/last';\nimport update from './modules/update';\n\n/**\n * Object helper\n */\nclass Arr extends Array {\n    static get [Symbol.species]() {\n        return Array;\n    }\n\n    /**\n     * Sort a multiarray.\n     *\n     * @param {string} key\n     * @param {string} direction\n     *\n     * @return {array}\n     */\n    multisort(key, direction) {\n        return multisort(this[0], key, direction);\n    }\n\n    /**\n     * Filter a multi array.\n     *\n     * @param {string}  key\n     * @param {string}  find\n     * @param {boolean} operator\n     *\n     * @return {array}\n     */\n    multifilter(key, find, operator) {\n        return multifilter(this[0], key, find, operator);\n    }\n\n    /**\n     * Only get some keys of a multi array.\n     *\n     * @param {string} key\n     *\n     * @return {array}\n     */\n    multikey(key) {\n        return multikey(this[0], key);\n    }\n\n    /**\n     * Get the intersection of arrays.\n     *\n     * @param {string}  array\n     * @param {boolean} multi\n     *\n     * @return {array}\n     */\n    intersect(array, multi) {\n        return intersect(this[0], array, multi);\n    }\n\n    /**\n     * Get the difference of arrays.\n     *\n     * @param {string}  array\n     * @param {boolean} total\n     *\n     * @return {array}\n     */\n    diff(array, total) {\n        return diff(this[0], array, total);\n    }\n\n    /**\n     * Get the unique values of an array.\n     *\n     * @return {array}\n     */\n    get unique() {\n        return unique(this[0]);\n    }\n\n    /**\n     * Only add the value if the value isnt in the array.\n     *\n     * @param {string} newValue\n     *\n     * @return {int}\n     */\n    pushIfNotExists(newValue) {\n        if (this.indexOf(newValue) < 0) {\n            this.push(newValue);\n        }\n\n        return this.length;\n    }\n\n    /**\n     * Add multiple values to an array.\n     *\n     * @param {array} newValues\n     *\n     * @return {int}\n     */\n    pushMultiple(newValues) {\n        this.push(...newValues);\n\n        return this.length;\n    }\n\n    /**\n     * Add multiple values to an array.\n     * Only add the value if the value isnt in the array.\n     *\n     * @param {array} newValues\n     *\n     * @return {int}\n     */\n    pushMultipleIfNotExists(newValues) {\n        const array = this;\n\n        newValues.forEach((value) => {\n            array.pushIfNotExists(value);\n        });\n\n        return array.length;\n    }\n\n    /**\n     * The largest of the given numbers.\n     * If at least one of the arguments cannot be converted to a number,\n     * NaN is returned.\n     *\n     * @return {int}\n     */\n    get max() {\n        return max(this[0]);\n    }\n\n    /**\n     * The smallest of the given numbers.\n     * If at least one of the arguments cannot be converted to a number,\n     * NaN is returned.\n     *\n     * @return {int}\n     */\n    get min() {\n        return min(this[0]);\n    }\n\n    /**\n     * Get a random value of an array.\n     *\n     * @return {string}\n     */\n    get random() {\n        return random(this);\n    }\n\n    /**\n     * The summ of all values.\n     *\n     * @return {int}\n     */\n    get summ() {\n        return summ(this[0]);\n    }\n\n    /**\n     * Get the average of all values.\n     *\n     * @return {int}\n     */\n    get average() {\n        return average(this[0]);\n    }\n\n    /**\n     * Javascript implementation of Arr::get\n     *\n     * @param {string} key\n     * @param {object|null} defaultValue\n     *\n     * @return {object|null}\n     */\n    getByKey(key, defaultValue) {\n        return getByKey(this[0], key, defaultValue);\n    }\n\n    /**\n     * Javascript implementation of Arr::first\n     *\n     * @return {object|null}\n     */\n    get first() {\n        return first(this[0]);\n    }\n\n    /**\n     * Javascript implementation of Arr::last\n     *\n     * @return {object|null}\n     */\n    get last() {\n        return last(this[0]);\n    }\n\n    /**\n     * Update multiple items in an array\n     *\n     * @param {array} newValues\n     * @param {array} keys\n     *\n     * @return {array}\n     */\n    update(newValues, keys) {\n        return update(this[0], newValues, keys);\n    }\n}\n\nexport {\n    Arr,\n    multisort,\n    multifilter,\n    multikey,\n    intersect,\n    min,\n    max,\n    diff,\n    unique,\n    summ,\n    average,\n    random,\n    getByKey,\n    first,\n    last,\n    update,\n};\n"],"names":["Sorter","constructor","key","direction","this","moveDirection","order","original","sort","compare","bind","firstElement","secondElement","nameA","nameB","toUpperCase","[object Object]","multisort","create","min","length","reduce","a","b","Math","max","Match","find","operator","check","value","Array","isArray","checkOperators","indexOf","String","maxValue","minValue","hasMax","hasMin","matcher","filter","item","values","toString","split","some","multifilter","multikey","map","forEach","itemKey","intersect","array","multi","accumulator","currentValue","Diff","currentArray","otherArray","total","differenceArray","differenceArrayB","concat","diff","unique","originalArray","index","self","summ","average","random","maximum","floor","getByKey","defaultValue","keys","reference","referenceKey","shift","Object","prototype","hasOwnProperty","call","first","last","update","newValues","found","newItem","every","Arr","static","Symbol","species","pushIfNotExists","newValue","push","pushMultiple","pushMultipleIfNotExists"],"mappings":"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"}