{"version":3,"file":"helpers.umd.js","sources":["../src/modules/multisort.js","../src/modules/min.js","../src/modules/max.js","../src/modules/multifilter.js","../src/modules/multikey.js","../src/modules/intersect.js","../src/modules/diff.js","../src/modules/unique.js","../src/modules/summ.js","../src/modules/average.js","../src/modules/random.js","../src/modules/getByKey.js","../src/modules/first.js","../src/modules/last.js","../src/modules/update.js","../src/helpers.js"],"sourcesContent":["class Sorter {\n    constructor(key, direction) {\n        this.key = key;\n        this.moveDirection = direction === 'desc' ? -1 : 1;\n    }\n\n    order(original) {\n        return original.sort(this.compare.bind(this));\n    }\n\n    compare(firstElement, secondElement) {\n        let nameA = firstElement[this.key];\n        let nameB = secondElement[this.key];\n\n        if (typeof nameA === 'string') {\n            nameA = nameA.toUpperCase();\n        }\n\n        if (typeof nameB === 'string') {\n            nameB = nameB.toUpperCase();\n        }\n\n        if (nameA < nameB) {\n            return -1 * this.moveDirection;\n        }\n\n        if (nameA > nameB) {\n            return 1 * this.moveDirection;\n        }\n\n        return 0;\n    }\n\n    static create(original, key, direction) {\n        const sorter = new Sorter(key, direction);\n\n        return sorter.order(original);\n    }\n}\n\nexport default function multisort(original, key, direction) {\n    return Sorter.create(original, key, direction);\n}\n","export default function min(original) {\n    if (typeof original !== 'object' || original.length < 1) {\n        return null;\n    }\n\n    return original.reduce((a, b) => Math.min(a, b));\n}\n","export default function max(original) {\n    if (typeof original !== 'object' || original.length < 1) {\n        return null;\n    }\n\n    return original.reduce((a, b) => Math.max(a, b));\n}\n","import min from './min';\nimport max from './max';\n\nclass Match {\n    constructor(find, operator) {\n        this.find = find;\n        this.operator = operator || null;\n    }\n\n    check(value) {\n        if (Array.isArray(this.find)) {\n            return this.checkOperators(value, this.find.indexOf(value) < 0);\n        }\n\n        return this.checkOperators(value, String(value) !== String(this.find));\n    }\n\n    checkOperators(value, find) {\n        const maxValue = max(this.find);\n        const minValue = min(this.find);\n        const hasMax = maxValue !== null;\n        const hasMin = minValue !== null;\n\n        const notOperator =\n            find && (this.operator === '!=' || this.operator === '<>');\n        const noInput = !find && !this.operator;\n        const gtOperator =\n            ((value > maxValue && hasMax) || value > this.find) &&\n            this.operator === '>';\n        const gteOperator =\n            ((value >= maxValue && hasMax) || value >= this.find) &&\n            this.operator === '>=';\n        const ltOperator =\n            ((value < minValue && hasMin) || value < this.find) &&\n            this.operator === '<';\n        const lteOperator =\n            ((value <= minValue && hasMin) || value <= this.find) &&\n            this.operator === '<=';\n\n        return (\n            notOperator ||\n            noInput ||\n            gtOperator ||\n            gteOperator ||\n            ltOperator ||\n            lteOperator\n        );\n    }\n\n    static create(original, key, find, operator) {\n        const matcher = new Match(find, operator);\n\n        return original.filter((item) => {\n            let values = item[key];\n\n            if (!values) {\n                return false;\n            }\n\n            values = values.toString().split(',');\n\n            return values.some(matcher.check.bind(matcher));\n        });\n    }\n}\n\nexport default function multifilter(original, key, find, operator) {\n    return Match.create(original, key, find, operator);\n}\n","export default function multikey(original, key) {\n    return original.map((value) => {\n        const item = {};\n\n        if (typeof key === 'object') {\n            key.forEach((itemKey) => {\n                item[itemKey] = value[itemKey];\n            });\n\n            return item;\n        }\n\n        return value[key];\n    });\n}\n","export default function intersect(original, array, multi) {\n    return original.filter((value) => {\n        if (multi) {\n            const found = array.reduce((accumulator, currentValue) => {\n                if (currentValue.indexOf(value) >= 0) {\n                    return accumulator + 1;\n                }\n\n                return accumulator;\n            }, 0);\n\n            return found === array.length;\n        }\n\n        return array.indexOf(value) >= 0;\n    });\n}\n","class Diff {\n    constructor(currentArray, otherArray, total) {\n        this.currentArray = currentArray;\n        this.otherArray = otherArray;\n        this.total = total;\n    }\n\n    get differenceArray() {\n        return this.currentArray.filter(\n            (value) => this.otherArray.indexOf(value) < 0\n        );\n    }\n\n    get differenceArrayB() {\n        if (!this.total) {\n            return [];\n        }\n\n        return this.otherArray.filter(\n            (value) => this.currentArray.indexOf(value) < 0\n        );\n    }\n\n    get compare() {\n        return this.differenceArray.concat(this.differenceArrayB);\n    }\n\n    static create(currentArray, otherArray, total) {\n        const differ = new Diff(currentArray, otherArray, total);\n\n        return differ.compare;\n    }\n}\n\nexport default function diff(currentArray, otherArray, total) {\n    return Diff.create(currentArray, otherArray, total);\n}\n","export default function unique(originalArray) {\n    return originalArray.filter(\n        (value, index, self) => self.indexOf(value) === index\n    );\n}\n","export default function summ(originalArray) {\n    if (!Array.isArray(originalArray) || originalArray.length < 1) {\n        return null;\n    }\n\n    return originalArray.reduce((a, b) => a + b, 0);\n}\n","import summ from './summ';\n\nexport default function average(originalArray) {\n    if (!Array.isArray(originalArray) || originalArray.length < 1) {\n        return null;\n    }\n\n    return summ(originalArray) / originalArray.length;\n}\n","export default function random(originalArray) {\n    const minimum = 0;\n    const maximum = originalArray.length;\n    const randomIndex =\n        Math.floor(Math.random() * (maximum - minimum)) + minimum;\n\n    return originalArray[randomIndex];\n}\n","export default function getByKey(original, key, defaultValue) {\n    const keys = key.split('.');\n\n    let reference = original;\n\n    while (keys.length > 0) {\n        const referenceKey = keys.shift();\n\n        if (\n            reference === null ||\n            reference === undefined ||\n            !Object.prototype.hasOwnProperty.call(reference, referenceKey)\n        ) {\n            return defaultValue;\n        }\n        reference = reference[referenceKey];\n    }\n\n    return reference;\n}\n","export default function first(originalArray) {\n    if (!Array.isArray(originalArray) || originalArray.length < 1) {\n        return null;\n    }\n\n    return originalArray[0];\n}\n","export default function last(originalArray) {\n    if (!Array.isArray(originalArray) || originalArray.length < 1) {\n        return null;\n    }\n\n    return originalArray[originalArray.length - 1];\n}\n","export default function update(originalArray, newValues, keys) {\n    return originalArray.map((item) => {\n        const found = newValues.find((newItem) =>\n            keys.every((key) => newItem[key] === item[key])\n        );\n\n        return found ? { ...item, ...found } : item;\n    });\n}\n","import multisort from './modules/multisort';\nimport multifilter from './modules/multifilter';\nimport multikey from './modules/multikey';\nimport intersect from './modules/intersect';\nimport min from './modules/min';\nimport max from './modules/max';\nimport diff from './modules/diff';\nimport unique from './modules/unique';\nimport summ from './modules/summ';\nimport average from './modules/average';\nimport random from './modules/random';\nimport getByKey from './modules/getByKey';\nimport first from './modules/first';\nimport last from './modules/last';\nimport update from './modules/update';\n\n/**\n * Object helper\n */\nclass Arr extends Array {\n    static get [Symbol.species]() {\n        return Array;\n    }\n\n    /**\n     * Sort a multiarray.\n     *\n     * @param {string} key\n     * @param {string} direction\n     *\n     * @return {array}\n     */\n    multisort(key, direction) {\n        return multisort(this[0], key, direction);\n    }\n\n    /**\n     * Filter a multi array.\n     *\n     * @param {string}  key\n     * @param {string}  find\n     * @param {boolean} operator\n     *\n     * @return {array}\n     */\n    multifilter(key, find, operator) {\n        return multifilter(this[0], key, find, operator);\n    }\n\n    /**\n     * Only get some keys of a multi array.\n     *\n     * @param {string} key\n     *\n     * @return {array}\n     */\n    multikey(key) {\n        return multikey(this[0], key);\n    }\n\n    /**\n     * Get the intersection of arrays.\n     *\n     * @param {string}  array\n     * @param {boolean} multi\n     *\n     * @return {array}\n     */\n    intersect(array, multi) {\n        return intersect(this[0], array, multi);\n    }\n\n    /**\n     * Get the difference of arrays.\n     *\n     * @param {string}  array\n     * @param {boolean} total\n     *\n     * @return {array}\n     */\n    diff(array, total) {\n        return diff(this[0], array, total);\n    }\n\n    /**\n     * Get the unique values of an array.\n     *\n     * @return {array}\n     */\n    get unique() {\n        return unique(this[0]);\n    }\n\n    /**\n     * Only add the value if the value isnt in the array.\n     *\n     * @param {string} newValue\n     *\n     * @return {int}\n     */\n    pushIfNotExists(newValue) {\n        if (this.indexOf(newValue) < 0) {\n            this.push(newValue);\n        }\n\n        return this.length;\n    }\n\n    /**\n     * Add multiple values to an array.\n     *\n     * @param {array} newValues\n     *\n     * @return {int}\n     */\n    pushMultiple(newValues) {\n        this.push(...newValues);\n\n        return this.length;\n    }\n\n    /**\n     * Add multiple values to an array.\n     * Only add the value if the value isnt in the array.\n     *\n     * @param {array} newValues\n     *\n     * @return {int}\n     */\n    pushMultipleIfNotExists(newValues) {\n        const array = this;\n\n        newValues.forEach((value) => {\n            array.pushIfNotExists(value);\n        });\n\n        return array.length;\n    }\n\n    /**\n     * The largest of the given numbers.\n     * If at least one of the arguments cannot be converted to a number,\n     * NaN is returned.\n     *\n     * @return {int}\n     */\n    get max() {\n        return max(this[0]);\n    }\n\n    /**\n     * The smallest of the given numbers.\n     * If at least one of the arguments cannot be converted to a number,\n     * NaN is returned.\n     *\n     * @return {int}\n     */\n    get min() {\n        return min(this[0]);\n    }\n\n    /**\n     * Get a random value of an array.\n     *\n     * @return {string}\n     */\n    get random() {\n        return random(this);\n    }\n\n    /**\n     * The summ of all values.\n     *\n     * @return {int}\n     */\n    get summ() {\n        return summ(this[0]);\n    }\n\n    /**\n     * Get the average of all values.\n     *\n     * @return {int}\n     */\n    get average() {\n        return average(this[0]);\n    }\n\n    /**\n     * Javascript implementation of Arr::get\n     *\n     * @param {string} key\n     * @param {object|null} defaultValue\n     *\n     * @return {object|null}\n     */\n    getByKey(key, defaultValue) {\n        return getByKey(this[0], key, defaultValue);\n    }\n\n    /**\n     * Javascript implementation of Arr::first\n     *\n     * @return {object|null}\n     */\n    get first() {\n        return first(this[0]);\n    }\n\n    /**\n     * Javascript implementation of Arr::last\n     *\n     * @return {object|null}\n     */\n    get last() {\n        return last(this[0]);\n    }\n\n    /**\n     * Update multiple items in an array\n     *\n     * @param {array} newValues\n     * @param {array} keys\n     *\n     * @return {array}\n     */\n    update(newValues, keys) {\n        return update(this[0], newValues, keys);\n    }\n}\n\nexport {\n    Arr,\n    multisort,\n    multifilter,\n    multikey,\n    intersect,\n    min,\n    max,\n    diff,\n    unique,\n    summ,\n    average,\n    random,\n    getByKey,\n    first,\n    last,\n    update,\n};\n"],"names":["Sorter","key","direction","this","moveDirection","order","original","sort","compare","bind","firstElement","secondElement","nameA","nameB","toUpperCase","create","multisort","min","length","reduce","a","b","Math","max","Match","find","operator","check","value","Array","isArray","checkOperators","indexOf","String","maxValue","minValue","hasMax","hasMin","matcher","filter","item","values","toString","split","some","multifilter","multikey","map","forEach","itemKey","intersect","array","multi","accumulator","currentValue","Diff","currentArray","otherArray","total","_this","_this2","differenceArray","concat","differenceArrayB","diff","unique","originalArray","index","self","summ","average","random","maximum","floor","getByKey","defaultValue","keys","reference","referenceKey","shift","Object","prototype","hasOwnProperty","call","first","last","update","newValues","found","newItem","every","pushIfNotExists","newValue","push","pushMultiple","pushMultipleIfNotExists","Symbol","species"],"mappings":"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"}